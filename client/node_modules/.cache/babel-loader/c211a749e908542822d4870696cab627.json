{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wpurdum/Documents/string_theory/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wpurdum/Documents/string_theory/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// import cors from \"cors\";\nexport var callBackend =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var response, body;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch('_express_backend');\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            body = _context.sent;\n            return _context.abrupt(\"return\", body);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function callBackend() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var postPreferences =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(preferences) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(\"in the post \".concat(preferences));\n            _context2.next = 3;\n            return fetch('/preferences', {\n              // mode: cors,\n              method: \"post\",\n              resolveWithFullResponse: true,\n              body: preferences,\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n                \"Access-Control-Allow-Credentials\": true,\n                'Access-Control-Allow-Methods': 'GET, POST, PATCH, PUT, DELETE, OPTIONS'\n              }\n            });\n\n          case 3:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", response);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function postPreferences(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var callBackendAPI =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3() {\n    var response, body;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return fetch('/express_backend');\n\n          case 2:\n            response = _context3.sent;\n            _context3.next = 5;\n            return response.json();\n\n          case 5:\n            body = _context3.sent;\n            console.log(body, \"the body\");\n\n            if (!(response.status !== 200)) {\n              _context3.next = 9;\n              break;\n            }\n\n            throw Error(body.message);\n\n          case 9:\n            return _context3.abrupt(\"return\", body);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n\n  return function callBackendAPI() {\n    return _ref3.apply(this, arguments);\n  };\n}(); //   method: \"post\",\n//       resolveWithFullResponse: true,\n//       headers: {\n//         \"Accept\": \"application/json\",\n//         \"Content-Type\": \"application/json\"\n//       },\n//       body: JSON.stringify(dynamoRequest),","map":{"version":3,"sources":["/Users/wpurdum/Documents/string_theory/client/src/requests/index.js"],"names":["callBackend","fetch","response","json","body","postPreferences","preferences","console","log","method","resolveWithFullResponse","headers","callBackendAPI","status","Error","message"],"mappings":";;AAAA;AACA,OAAO,IAAMA,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACAC,KAAK,CAAE,kBAAF,CADL;;AAAA;AACjBC,YAAAA,QADiB;AAAA;AAAA,mBAEJA,QAAQ,CAACC,IAAT,EAFI;;AAAA;AAEjBC,YAAAA,IAFiB;AAAA,6CAGhBA,IAHgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXJ,WAAW;AAAA;AAAA;AAAA,GAAjB;AAOP,OAAO,IAAMK,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAOC,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BC,YAAAA,OAAO,CAACC,GAAR,uBAA2BF,WAA3B;AAD2B;AAAA,mBAEJL,KAAK,CAAE,cAAF,EAAkB;AAC1C;AACAQ,cAAAA,MAAM,EAAE,MAFkC;AAG1CC,cAAAA,uBAAuB,EAAE,IAHiB;AAI1CN,cAAAA,IAAI,EAAEE,WAJoC;AAK1CK,cAAAA,OAAO,EAAE;AACL,gCAAgB,kBADX;AAEL,0BAAU,kBAFL;AAGL,oDAAoC,IAH/B;AAIL,gDAAgC;AAJ3B;AALiC,aAAlB,CAFD;;AAAA;AAErBT,YAAAA,QAFqB;AAAA,8CAcpBA,QAdoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfG,eAAe;AAAA;AAAA;AAAA,GAArB;AAkBP,OAAO,IAAMO,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACHX,KAAK,CAAC,kBAAD,CADF;;AAAA;AACpBC,YAAAA,QADoB;AAAA;AAAA,mBAEPA,QAAQ,CAACC,IAAT,EAFO;;AAAA;AAEpBC,YAAAA,IAFoB;AAG1BG,YAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAAkB,UAAlB;;AAH0B,kBAKtBF,QAAQ,CAACW,MAAT,KAAoB,GALE;AAAA;AAAA;AAAA;;AAAA,kBAMlBC,KAAK,CAACV,IAAI,CAACW,OAAN,CANa;;AAAA;AAAA,8CAQnBX,IARmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdQ,cAAc;AAAA;AAAA;AAAA,GAApB,C,CAYP;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import cors from \"cors\";\nexport const callBackend = async () => {\n    const response = await fetch ('_express_backend');\n    const body = await response.json()\n    return body;\n\n}\n\nexport const postPreferences = async (preferences) => {\n    console.log(`in the post ${preferences}`)\n    const response = await fetch ('/preferences', {\n        // mode: cors,\n        method: \"post\",\n        resolveWithFullResponse: true,\n        body: preferences,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n            \"Access-Control-Allow-Credentials\": true,\n            'Access-Control-Allow-Methods': 'GET, POST, PATCH, PUT, DELETE, OPTIONS'\n        }\n    })\n    return response\n}\n\n\nexport const callBackendAPI = async () => {\n    const response = await fetch('/express_backend');\n    const body = await response.json();\n    console.log(body, \"the body\")\n\n    if (response.status !== 200) {\n      throw Error(body.message) \n    }\n    return body;\n  };\n\n\n//   method: \"post\",\n//       resolveWithFullResponse: true,\n//       headers: {\n//         \"Accept\": \"application/json\",\n//         \"Content-Type\": \"application/json\"\n//       },\n//       body: JSON.stringify(dynamoRequest),"]},"metadata":{},"sourceType":"module"}