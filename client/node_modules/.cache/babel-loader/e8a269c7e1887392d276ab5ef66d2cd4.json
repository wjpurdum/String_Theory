{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wpurdum/Documents/string_theory/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wpurdum/Documents/string_theory/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// import cors from \"cors\";\nexport var callBackend =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var response, body;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch('_express_backend');\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            body = _context.sent;\n            return _context.abrupt(\"return\", body);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function callBackend() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var postPreferences =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(postBody) {\n    var response, responseToJSON;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(\"in the post \".concat(postBody));\n            _context2.next = 3;\n            return fetch('/preferences', {\n              // mode: cors,\n              method: \"post\",\n              resolveWithFullResponse: true,\n              body: JSON.stringify(postBody),\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n                \"Access-Control-Allow-Credentials\": true,\n                'Access-Control-Allow-Methods': 'GET, POST, PATCH, PUT, DELETE, OPTIONS'\n              }\n            });\n\n          case 3:\n            response = _context2.sent;\n            console.log(response, \"the response\");\n            responseToJSON = response.json();\n            console.log(responseToJSON, \"the json response\");\n            return _context2.abrupt(\"return\", responseToJSON);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function postPreferences(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}(); // export const callBackendAPI = async () => {\n//     const response = await fetch('/express_backend');\n//     const body = await response.json();\n//     console.log(body, \"the body\")\n//     if (response.status !== 200) {\n//       throw Error(body.message) \n//     }\n//     return body;\n//   };","map":{"version":3,"sources":["/Users/wpurdum/Documents/string_theory/client/src/requests/index.js"],"names":["callBackend","fetch","response","json","body","postPreferences","postBody","console","log","method","resolveWithFullResponse","JSON","stringify","headers","responseToJSON"],"mappings":";;AAAA;AACA,OAAO,IAAMA,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACAC,KAAK,CAAE,kBAAF,CADL;;AAAA;AACjBC,YAAAA,QADiB;AAAA;AAAA,mBAEJA,QAAQ,CAACC,IAAT,EAFI;;AAAA;AAEjBC,YAAAA,IAFiB;AAAA,6CAGhBA,IAHgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXJ,WAAW;AAAA;AAAA;AAAA,GAAjB;AAOP,OAAO,IAAMK,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BC,YAAAA,OAAO,CAACC,GAAR,uBAA2BF,QAA3B;AAD2B;AAAA,mBAEJL,KAAK,CAAE,cAAF,EAAkB;AAC1C;AACAQ,cAAAA,MAAM,EAAE,MAFkC;AAG1CC,cAAAA,uBAAuB,EAAE,IAHiB;AAI1CN,cAAAA,IAAI,EAAEO,IAAI,CAACC,SAAL,CAAeN,QAAf,CAJoC;AAK1CO,cAAAA,OAAO,EAAE;AACL,gCAAgB,kBADX;AAEL,0BAAU,kBAFL;AAGL,oDAAoC,IAH/B;AAIL,gDAAgC;AAJ3B;AALiC,aAAlB,CAFD;;AAAA;AAErBX,YAAAA,QAFqB;AAc3BK,YAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ,EAAsB,cAAtB;AACIY,YAAAA,cAfuB,GAeNZ,QAAQ,CAACC,IAAT,EAfM;AAgB3BI,YAAAA,OAAO,CAACC,GAAR,CAAYM,cAAZ,EAA4B,mBAA5B;AAhB2B,8CAiBpBA,cAjBoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfT,eAAe;AAAA;AAAA;AAAA,GAArB,C,CAqBP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["// import cors from \"cors\";\nexport const callBackend = async () => {\n    const response = await fetch ('_express_backend');\n    const body = await response.json()\n    return body;\n\n}\n\nexport const postPreferences = async (postBody) => {\n    console.log(`in the post ${postBody}`)\n    const response = await fetch ('/preferences', {\n        // mode: cors,\n        method: \"post\",\n        resolveWithFullResponse: true,\n        body: JSON.stringify(postBody),\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n            \"Access-Control-Allow-Credentials\": true,\n            'Access-Control-Allow-Methods': 'GET, POST, PATCH, PUT, DELETE, OPTIONS'\n        }\n    })\n    console.log(response, \"the response\")\n    let responseToJSON = response.json()\n    console.log(responseToJSON, \"the json response\")\n    return responseToJSON\n}\n\n\n// export const callBackendAPI = async () => {\n//     const response = await fetch('/express_backend');\n//     const body = await response.json();\n//     console.log(body, \"the body\")\n\n//     if (response.status !== 200) {\n//       throw Error(body.message) \n//     }\n//     return body;\n//   };\n"]},"metadata":{},"sourceType":"module"}