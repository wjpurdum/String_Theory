{"ast":null,"code":"import _slicedToArray from \"/Users/wpurdum/Documents/string_theory/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// export const mapConvert = (state) => {\n//     let array = []\n//     state.forEach(value, key, map => {\n//     })\n// }\nexport var processMap = function processMap(map) {\n  console.log(\"hitting helper\");\n  var preferences = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = map[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _ref3 = _step.value;\n\n      var _ref2 = _slicedToArray(_ref3, 2);\n\n      var k = _ref2[0];\n      var v = _ref2[1];\n      preferences.push(k);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return preferences;\n}; // function logMapElements(value, key, map) {\n//     console.log(`m[${key}] = ${value}`);\n//   }\n//   new Map([['foo', 3], ['bar', {}], ['baz', undefined]])\n//     .forEach(logMapElements);\n// expected output: \"m[foo] = 3\"\n// expected output: \"m[bar] = [object Object]\"\n// expected output: \"m[baz] = undefined\"","map":{"version":3,"sources":["/Users/wpurdum/Documents/string_theory/client/src/helpers/helpers.js"],"names":["processMap","map","console","log","preferences","k","v","push"],"mappings":";AAAA;AACA;AACA;AAEA;AACA;AAEA,OAAO,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAS;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,MAAIC,WAAW,GAAG,EAAlB;AAFiC;AAAA;AAAA;;AAAA;AAGjC,yBAAqBH,GAArB,8HAA0B;AAAA;;AAAA;;AAAA,UAAdI,CAAc;AAAA,UAAXC,CAAW;AACxBF,MAAAA,WAAW,CAACG,IAAZ,CAAiBF,CAAjB;AACD;AALgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMjC,SAAOD,WAAP;AACD,CAPM,C,CASP;AACA;AACA;AAEA;AACA;AAEE;AACA;AACA","sourcesContent":["// export const mapConvert = (state) => {\n//     let array = []\n//     state.forEach(value, key, map => {\n\n//     })\n// }\n\nexport const processMap = (map) => {\n  console.log(\"hitting helper\")\n  let preferences = [];\n  for (const [k, v] of map) {\n    preferences.push(k)\n  }\n  return preferences;\n}\n\n// function logMapElements(value, key, map) {\n//     console.log(`m[${key}] = ${value}`);\n//   }\n  \n//   new Map([['foo', 3], ['bar', {}], ['baz', undefined]])\n//     .forEach(logMapElements);\n  \n  // expected output: \"m[foo] = 3\"\n  // expected output: \"m[bar] = [object Object]\"\n  // expected output: \"m[baz] = undefined\""]},"metadata":{},"sourceType":"module"}